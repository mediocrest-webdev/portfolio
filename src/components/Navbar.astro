---
import tailwindConfig from "../../tailwind.config.mjs";
import Button from "./Button.astro";

const navLinks = [
  { href: '/', label: 'Home' },
  { href: '#works', label: 'Featured works' },
  { href: '#testimonials', label: 'Reviews' },
  { href: '#contact', label: "Let's talk" },
];
---

<!-- Navbar Start -->
<header class='sticky top-0 z-50 container px-8 py-4 mx-auto shadow-sm max-w-screen-2xl bg-background bg-opacity-70 backdrop-blur-md'>
  <nav class="flex items-center justify-between gap-2">
    <a href="/" class='hidden md:block font-bold'>
      LanceFlores <sup class="font-semibold">Â©</sup>
    </a>
    <a href="/" class='block md:hidden font-bold'>
      LF <sup class="font-semibold">Â©</sup>
    </a>

    <!-- Desktop Menu -->
    <div class='items-center hidden gap-2 lg:flex ms-auto transition-colors duration-200'>
      {navLinks.map((link) => (
        <a href={link.href} class="text-contrast transition-all ease-out duration-1000 hover:bg-gray-200 hover:drop-shadow-sm hover:text-text px-4 py-2 rounded-full">{link.label}</a>
      ))}
    </div>
    
    <!-- Customizable Button -->
    <Button 
      style="hidden lg:block ml-auto bg-text text-white px-3 py-1 lg:px-6 lg:py-3 rounded-full transition-transform hover:scale-105 duration-300 delay-50" 
      label="Get Started ðŸš€" 
      data-cal-link="mediocrest/15min" 
      data-cal-namespace="15min" 
      data-cal-config='{"layout":"month_view"}'
    />

    <!-- Mobile Menu Button -->
    <div id="mobile-menu-button" class="cursor-pointer">
      <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#000000" class="lg:hidden">
        <path d="M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z"/>
      </svg>
    </div>
  </nav>

  <!-- Mobile Menu -->
  <div id="mobile-menu" class="hidden mb-2 lg:hidden">
    <div class="flex flex-col items-start mt-4 mb-6">
      {navLinks.map((link) => (
        <a href={link.href} class="py-2 text-contrast">{link.label}</a>
      ))}
    </div>
    <Button 
      style="bg-text text-white px-4 py-2 sm:px-6 py-3 rounded-full hover:shadow-sm transition-transform hover:scale-105 duration-300 delay-50" 
      label="Get Started ðŸš€" 
    />
  </div>
</header>
<!-- Navbar End -->

<!-- JavaScript to Toggle Mobile Menu -->
<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileLinks = mobileMenu.querySelectorAll('a');

  // State variable to track if the menu is open
  let isMenuOpen = false;

  mobileMenuButton.addEventListener('click', () => {
    // Toggle the visibility of the mobile menu
    mobileMenu.classList.toggle('hidden');
    
    // Toggle the state
    isMenuOpen = !isMenuOpen;

    // Change the SVG based on the state
    if (isMenuOpen) {
      mobileMenuButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#000000" class="lg:hidden">
          <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"/>
        </svg>
      `;
    } else {
      mobileMenuButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#000000" class="lg:hidden">
          <path d="M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z"/>
        </svg>
      `;
    }
  });

  // Add click event listener to each mobile link
  mobileLinks.forEach(link => {
    link.addEventListener('click', () => {
      // Hide the mobile menu
      mobileMenu.classList.add('hidden');
      isMenuOpen = false; // Reset the state

      // Change the SVG back to the closed state
      mobileMenuButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#000000" class="md:hidden">
          <path d="M120-240v-80h720v80H120Zm0-200v-80h720v80H120Zm0-200v-80h720v80H120Z"/>
        </svg>
      `;
    });
  });
</script>

<!-- Cal element-click embed code begins -->
<script type="text/javascript">
  (function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
Cal("init", "15min", {origin:"https://cal.com"});

  
  // Important: Please add the following attributes to the element that should trigger the calendar to open upon clicking.
  // `data-cal-link="mediocrest/15min"`
  // data-cal-namespace="15min"
  // `data-cal-config='{"layout":"month_view"}'`

  Cal.ns["15min"]("ui", {"styles":{"branding":{"brandColor":"#000000"}},"hideEventTypeDetails":false,"layout":"month_view"});
</script>
  <!-- Cal element-click embed code ends -->
